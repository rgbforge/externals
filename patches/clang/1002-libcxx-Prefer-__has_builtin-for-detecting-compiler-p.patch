[libc++] Prefer __has_builtin for detecting compiler-provided type_traits

Both clang and GCC support using `__has_builtin` for detecting compiler-provided type_traits. Use it instead of `__has_keyword` or `__has_feature` to remove special-casing for GCC-provided builtins

Based on commit 2040fde9097ae7753531c9c58332a933cbaaa43c from upstream.
Upstream commit Author: Nikolas Klauser <nikolasklauser@berlin.de>
Upstream commit Author Date: Mon, 4 Jul 2022 03:27:58 +0200
Upstream commit Comitter: Nikolas Klauser <nikolasklauser@berlin.de>
Upstream commit Commit Date: Wed, 6 Jul 2022 13:33:50 +0200
---
 libcxx/include/type_traits |  192 ++++++++++++++++++++++-----------------------
 1 file changed, 96 insertions(+), 96 deletions(-)

diff -pru llvm-project.orig/libcxx/include/type_traits llvm-project/libcxx/include/type_traits
--- llvm-project.orig/libcxx/include/type_traits	2024-05-02 15:29:00.331309456 -0500
+++ llvm-project/libcxx/include/type_traits	2024-05-02 18:49:12.866513510 -0500
@@ -552,7 +552,7 @@ template <bool _Bp, class _Tp = void> us
 
 // is_same
 
-#if __has_keyword(__is_same)
+#if __has_builtin(__is_same)
 
 template <class _Tp, class _Up>
 struct _LIBCPP_TEMPLATE_VIS is_same : _BoolConstant<__is_same(_Tp, _Up)> { };
@@ -609,7 +609,7 @@ struct __two {char __lx[2];};
 
 // is_const
 
-#if __has_keyword(__is_const)
+#if __has_builtin(__is_const)
 
 template <class _Tp>
 struct _LIBCPP_TEMPLATE_VIS is_const : _BoolConstant<__is_const(_Tp)> { };
@@ -630,11 +630,11 @@ _LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR boo
     = is_const<_Tp>::value;
 #endif
 
-#endif // __has_keyword(__is_const)
+#endif // __has_builtin(__is_const)
 
 // is_volatile
 
-#if __has_keyword(__is_volatile)
+#if __has_builtin(__is_volatile)
 
 template <class _Tp>
 struct _LIBCPP_TEMPLATE_VIS is_volatile : _BoolConstant<__is_volatile(_Tp)> { };
@@ -655,11 +655,11 @@ _LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR boo
     = is_volatile<_Tp>::value;
 #endif
 
-#endif // __has_keyword(__is_volatile)
+#endif // __has_builtin(__is_volatile)
 
 // remove_const
 
-#if __has_keyword(__remove_const)
+#if __has_builtin(__remove_const)
 
 template <class _Tp>
 struct _LIBCPP_TEMPLATE_VIS remove_const {typedef __remove_const(_Tp) type;};
@@ -676,11 +676,11 @@ template <class _Tp> struct _LIBCPP_TEMP
 template <class _Tp> using remove_const_t = typename remove_const<_Tp>::type;
 #endif
 
-#endif // __has_keyword(__remove_const)
+#endif // __has_builtin(__remove_const)
 
 // remove_volatile
 
-#if __has_keyword(__remove_volatile)
+#if __has_builtin(__remove_volatile)
 
 template <class _Tp>
 struct _LIBCPP_TEMPLATE_VIS remove_volatile {typedef __remove_volatile(_Tp) type;};
@@ -697,11 +697,11 @@ template <class _Tp> struct _LIBCPP_TEMP
 template <class _Tp> using remove_volatile_t = typename remove_volatile<_Tp>::type;
 #endif
 
-#endif // __has_keyword(__remove_volatile)
+#endif // __has_builtin(__remove_volatile)
 
 // remove_cv
 
-#if __has_keyword(__remove_cv)
+#if __has_builtin(__remove_cv)
 
 template <class _Tp>
 struct _LIBCPP_TEMPLATE_VIS remove_cv {typedef __remove_cv(_Tp) type;};
@@ -718,11 +718,11 @@ template <class _Tp> struct _LIBCPP_TEMP
 template <class _Tp> using remove_cv_t = typename remove_cv<_Tp>::type;
 #endif
 
-#endif // __has_keyword(__remove_cv)
+#endif // __has_builtin(__remove_cv)
 
 // is_void
 
-#if __has_keyword(__is_void)
+#if __has_builtin(__is_void)
 
 template <class _Tp>
 struct _LIBCPP_TEMPLATE_VIS is_void : _BoolConstant<__is_void(_Tp)> { };
@@ -743,7 +743,7 @@ _LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR boo
     = is_void<_Tp>::value;
 #endif
 
-#endif // __has_keyword(__is_void)
+#endif // __has_builtin(__is_void)
 
 // __is_nullptr_t
 
@@ -766,7 +766,7 @@ _LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR boo
 
 // is_integral
 
-#if __has_keyword(__is_integral)
+#if __has_builtin(__is_integral)
 
 template <class _Tp>
 struct _LIBCPP_TEMPLATE_VIS is_integral : _BoolConstant<__is_integral(_Tp)> { };
@@ -787,7 +787,7 @@ _LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR boo
     = is_integral<_Tp>::value;
 #endif
 
-#endif // __has_keyword(__is_integral)
+#endif // __has_builtin(__is_integral)
 
 // __libcpp_is_signed_integer, __libcpp_is_unsigned_integer
 
@@ -834,7 +834,7 @@ _LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR boo
 
 // is_array
 
-#if __has_keyword(__is_array)
+#if __has_builtin(__is_array)
 
 template <class _Tp>
 struct _LIBCPP_TEMPLATE_VIS is_array : _BoolConstant<__is_array(_Tp)> { };
@@ -859,12 +859,12 @@ _LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR boo
     = is_array<_Tp>::value;
 #endif
 
-#endif // __has_keyword(__is_array)
+#endif // __has_builtin(__is_array)
 
 // is_pointer
 
 // Before Clang 11 / AppleClang 12.0.5, __is_pointer didn't work for Objective-C types.
-#if __has_keyword(__is_pointer) &&                                             \
+#if __has_builtin(__is_pointer) &&                                             \
     !(defined(_LIBCPP_CLANG_VER) && _LIBCPP_CLANG_VER < 1100) &&               \
     !(defined(_LIBCPP_APPLE_CLANG_VER) && _LIBCPP_APPLE_CLANG_VER < 1205)
 
@@ -876,7 +876,7 @@ template <class _Tp>
 _LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_pointer_v = __is_pointer(_Tp);
 #endif
 
-#else // __has_keyword(__is_pointer)
+#else // __has_builtin(__is_pointer)
 
 template <class _Tp> struct __libcpp_is_pointer       : public false_type {};
 template <class _Tp> struct __libcpp_is_pointer<_Tp*> : public true_type {};
@@ -898,13 +898,13 @@ _LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR boo
     = is_pointer<_Tp>::value;
 #endif
 
-#endif // __has_keyword(__is_pointer)
+#endif // __has_builtin(__is_pointer)
 
 // is_reference
 
-#if __has_keyword(__is_lvalue_reference) && \
-    __has_keyword(__is_rvalue_reference) && \
-    __has_keyword(__is_reference)
+#if __has_builtin(__is_lvalue_reference) && \
+    __has_builtin(__is_rvalue_reference) && \
+    __has_builtin(__is_reference)
 
 template<class _Tp>
 struct _LIBCPP_TEMPLATE_VIS is_lvalue_reference : _BoolConstant<__is_lvalue_reference(_Tp)> { };
@@ -926,7 +926,7 @@ template <class _Tp>
 _LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_rvalue_reference_v = __is_rvalue_reference(_Tp);
 #endif
 
-#else // __has_keyword(__is_lvalue_reference) && etc...
+#else // __has_builtin(__is_lvalue_reference) && etc...
 
 template <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_lvalue_reference       : public false_type {};
 template <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_lvalue_reference<_Tp&> : public true_type {};
@@ -952,11 +952,11 @@ _LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR boo
     = is_rvalue_reference<_Tp>::value;
 #endif
 
-#endif // __has_keyword(__is_lvalue_reference) && etc...
+#endif // __has_builtin(__is_lvalue_reference) && etc...
 
 // is_union
 
-#if __has_feature(is_union) || defined(_LIBCPP_COMPILER_GCC)
+#if __has_builtin(__is_union)
 
 template <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_union
     : public integral_constant<bool, __is_union(_Tp)> {};
@@ -977,7 +977,7 @@ _LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR boo
 
 // is_class
 
-#if __has_feature(is_class) || defined(_LIBCPP_COMPILER_GCC)
+#if __has_builtin(__is_class)
 
 template <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_class
     : public integral_constant<bool, __is_class(_Tp)> {};
@@ -1034,7 +1034,7 @@ template <class _Tp, class _Up> struct _
   };
 };
 
-#if __has_keyword(__is_member_function_pointer)
+#if __has_builtin(__is_member_function_pointer)
 
 template<class _Tp>
 struct _LIBCPP_TEMPLATE_VIS is_member_function_pointer
@@ -1046,7 +1046,7 @@ _LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR boo
     = __is_member_function_pointer(_Tp);
 #endif
 
-#else // __has_keyword(__is_member_function_pointer)
+#else // __has_builtin(__is_member_function_pointer)
 
 template <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_member_function_pointer
     : public _BoolConstant< __libcpp_is_member_pointer<typename remove_cv<_Tp>::type>::__is_func > {};
@@ -1057,11 +1057,11 @@ _LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR boo
     = is_member_function_pointer<_Tp>::value;
 #endif
 
-#endif // __has_keyword(__is_member_function_pointer)
+#endif // __has_builtin(__is_member_function_pointer)
 
 // is_member_pointer
 
-#if __has_keyword(__is_member_pointer)
+#if __has_builtin(__is_member_pointer)
 
 template<class _Tp>
 struct _LIBCPP_TEMPLATE_VIS is_member_pointer : _BoolConstant<__is_member_pointer(_Tp)> { };
@@ -1071,7 +1071,7 @@ template <class _Tp>
 _LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_member_pointer_v = __is_member_pointer(_Tp);
 #endif
 
-#else // __has_keyword(__is_member_pointer)
+#else // __has_builtin(__is_member_pointer)
 
 template <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_member_pointer
  : public _BoolConstant< __libcpp_is_member_pointer<typename remove_cv<_Tp>::type>::__is_member > {};
@@ -1082,11 +1082,11 @@ _LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR boo
     = is_member_pointer<_Tp>::value;
 #endif
 
-#endif // __has_keyword(__is_member_pointer)
+#endif // __has_builtin(__is_member_pointer)
 
 // is_member_object_pointer
 
-#if __has_keyword(__is_member_object_pointer)
+#if __has_builtin(__is_member_object_pointer)
 
 template<class _Tp>
 struct _LIBCPP_TEMPLATE_VIS is_member_object_pointer
@@ -1098,7 +1098,7 @@ _LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR boo
     = __is_member_object_pointer(_Tp);
 #endif
 
-#else // __has_keyword(__is_member_object_pointer)
+#else // __has_builtin(__is_member_object_pointer)
 
 template <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_member_object_pointer
     : public _BoolConstant< __libcpp_is_member_pointer<typename remove_cv<_Tp>::type>::__is_obj >  {};
@@ -1109,11 +1109,11 @@ _LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR boo
     = is_member_object_pointer<_Tp>::value;
 #endif
 
-#endif // __has_keyword(__is_member_object_pointer)
+#endif // __has_builtin(__is_member_object_pointer)
 
 // is_enum
 
-#if __has_feature(is_enum) || defined(_LIBCPP_COMPILER_GCC)
+#if __has_builtin(__is_enum)
 
 template <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_enum
     : public integral_constant<bool, __is_enum(_Tp)> {};
@@ -1143,7 +1143,7 @@ _LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR boo
     = is_enum<_Tp>::value;
 #endif
 
-#endif // __has_feature(is_enum) || defined(_LIBCPP_COMPILER_GCC)
+#endif // __has_builtin(__is_enum)
 
 // is_arithmetic
 
@@ -1162,7 +1162,7 @@ _LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR boo
 
 // Before Clang 10, __is_fundamental didn't work for nullptr_t.
 // In C++03 nullptr_t is library-provided but must still count as "fundamental."
-#if __has_keyword(__is_fundamental) &&                                         \
+#if __has_builtin(__is_fundamental) &&                                         \
     !(defined(_LIBCPP_CLANG_VER) && _LIBCPP_CLANG_VER < 1000) &&               \
     !defined(_LIBCPP_CXX03_LANG)
 
@@ -1174,7 +1174,7 @@ template <class _Tp>
 _LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_fundamental_v = __is_fundamental(_Tp);
 #endif
 
-#else // __has_keyword(__is_fundamental)
+#else // __has_builtin(__is_fundamental)
 
 template <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_fundamental
     : public integral_constant<bool, is_void<_Tp>::value        ||
@@ -1187,12 +1187,12 @@ _LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR boo
     = is_fundamental<_Tp>::value;
 #endif
 
-#endif // __has_keyword(__is_fundamental)
+#endif // __has_builtin(__is_fundamental)
 
 // is_scalar
 
 // In C++03 nullptr_t is library-provided but must still count as "scalar."
-#if __has_keyword(__is_scalar) && !defined(_LIBCPP_CXX03_LANG)
+#if __has_builtin(__is_scalar) && !defined(_LIBCPP_CXX03_LANG)
 
 template<class _Tp>
 struct _LIBCPP_TEMPLATE_VIS is_scalar : _BoolConstant<__is_scalar(_Tp)> { };
@@ -1202,7 +1202,7 @@ template <class _Tp>
 _LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_scalar_v = __is_scalar(_Tp);
 #endif
 
-#else // __has_keyword(__is_scalar)
+#else // __has_builtin(__is_scalar)
 
 template <class _Tp> struct __is_block : false_type {};
 #if defined(_LIBCPP_HAS_EXTENSION_BLOCKS)
@@ -1225,11 +1225,11 @@ _LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR boo
     = is_scalar<_Tp>::value;
 #endif
 
-#endif // __has_keyword(__is_scalar)
+#endif // __has_builtin(__is_scalar)
 
 // is_object
 
-#if __has_keyword(__is_object)
+#if __has_builtin(__is_object)
 
 template<class _Tp>
 struct _LIBCPP_TEMPLATE_VIS is_object : _BoolConstant<__is_object(_Tp)> { };
@@ -1239,7 +1239,7 @@ template <class _Tp>
 _LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_object_v = __is_object(_Tp);
 #endif
 
-#else // __has_keyword(__is_object)
+#else // __has_builtin(__is_object)
 
 template <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_object
     : public integral_constant<bool, is_scalar<_Tp>::value ||
@@ -1253,12 +1253,12 @@ _LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR boo
     = is_object<_Tp>::value;
 #endif
 
-#endif // __has_keyword(__is_object)
+#endif // __has_builtin(__is_object)
 
 // is_compound
 
 // >= 11 because in C++03 nullptr isn't actually nullptr
-#if __has_keyword(__is_compound) && !defined(_LIBCPP_CXX03_LANG)
+#if __has_builtin(__is_compound) && !defined(_LIBCPP_CXX03_LANG)
 
 template<class _Tp>
 struct _LIBCPP_TEMPLATE_VIS is_compound : _BoolConstant<__is_compound(_Tp)> { };
@@ -1268,7 +1268,7 @@ template <class _Tp>
 _LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_compound_v = __is_compound(_Tp);
 #endif
 
-#else // __has_keyword(__is_compound)
+#else // __has_builtin(__is_compound)
 
 template <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_compound
     : public integral_constant<bool, !is_fundamental<_Tp>::value> {};
@@ -1279,7 +1279,7 @@ _LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR boo
     = is_compound<_Tp>::value;
 #endif
 
-#endif // __has_keyword(__is_compound)
+#endif // __has_builtin(__is_compound)
 
 // __is_referenceable  [defns.referenceable]
 
@@ -1324,12 +1324,12 @@ template <class _Tp> using add_cv_t = ty
 
 // remove_reference
 
-#if __has_keyword(__remove_reference)
+#if __has_builtin(__remove_reference)
 
 template<class _Tp>
 struct _LIBCPP_TEMPLATE_VIS remove_reference { typedef __remove_reference(_Tp) type; };
 
-#else // __has_keyword(__remove_reference)
+#else // __has_builtin(__remove_reference)
 
 template <class _Tp> struct _LIBCPP_TEMPLATE_VIS remove_reference        {typedef _LIBCPP_NODEBUG_TYPE _Tp type;};
 template <class _Tp> struct _LIBCPP_TEMPLATE_VIS remove_reference<_Tp&>  {typedef _LIBCPP_NODEBUG_TYPE _Tp type;};
@@ -1339,7 +1339,7 @@ template <class _Tp> struct _LIBCPP_TEMP
 template <class _Tp> using remove_reference_t = typename remove_reference<_Tp>::type;
 #endif
 
-#endif // __has_keyword(__remove_reference)
+#endif // __has_builtin(__remove_reference)
 
 // add_lvalue_reference
 
@@ -1449,7 +1449,7 @@ template<class _Tp> using type_identity_
 // is_signed
 
 // Before Clang 10, __is_signed didn't work for floating-point types or enums.
-#if __has_keyword(__is_signed) &&                                              \
+#if __has_builtin(__is_signed) &&                                              \
     !(defined(_LIBCPP_CLANG_VER) && _LIBCPP_CLANG_VER < 1000)
 
 template<class _Tp>
@@ -1460,7 +1460,7 @@ template <class _Tp>
 _LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_signed_v = __is_signed(_Tp);
 #endif
 
-#else // __has_keyword(__is_signed)
+#else // __has_builtin(__is_signed)
 
 template <class _Tp, bool = is_integral<_Tp>::value>
 struct __libcpp_is_signed_impl : public _LIBCPP_BOOL_CONSTANT(_Tp(-1) < _Tp(0)) {};
@@ -1481,13 +1481,13 @@ _LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR boo
     = is_signed<_Tp>::value;
 #endif
 
-#endif // __has_keyword(__is_signed)
+#endif // __has_builtin(__is_signed)
 
 // is_unsigned
 
 // Before Clang 13, __is_unsigned returned true for enums with signed underlying type.
 // No currently-released version of AppleClang contains the fixed intrinsic.
-#if __has_keyword(__is_unsigned) &&                                            \
+#if __has_builtin(__is_unsigned) &&                                            \
     !(defined(_LIBCPP_CLANG_VER) && _LIBCPP_CLANG_VER < 1300) &&               \
     !defined(_LIBCPP_APPLE_CLANG_VER)
 
@@ -1499,7 +1499,7 @@ template <class _Tp>
 _LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_unsigned_v = __is_unsigned(_Tp);
 #endif
 
-#else // __has_keyword(__is_unsigned)
+#else // __has_builtin(__is_unsigned)
 
 template <class _Tp, bool = is_integral<_Tp>::value>
 struct __libcpp_is_unsigned_impl : public _LIBCPP_BOOL_CONSTANT(_Tp(0) < _Tp(-1)) {};
@@ -1520,7 +1520,7 @@ _LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR boo
     = is_unsigned<_Tp>::value;
 #endif
 
-#endif // __has_keyword(__is_unsigned)
+#endif // __has_builtin(__is_unsigned)
 
 // rank
 
@@ -1539,7 +1539,7 @@ _LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR siz
 
 // extent
 
-#if __has_keyword(__array_extent)
+#if __has_builtin(__array_extent)
 
 template<class _Tp, size_t _Dim = 0>
 struct _LIBCPP_TEMPLATE_VIS extent
@@ -1550,7 +1550,7 @@ template <class _Tp, unsigned _Ip = 0>
 _LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR size_t extent_v = __array_extent(_Tp, _Ip);
 #endif
 
-#else // __has_keyword(__array_extent)
+#else // __has_builtin(__array_extent)
 
 template <class _Tp, unsigned _Ip = 0> struct _LIBCPP_TEMPLATE_VIS extent
     : public integral_constant<size_t, 0> {};
@@ -1569,7 +1569,7 @@ _LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR siz
     = extent<_Tp, _Ip>::value;
 #endif
 
-#endif // __has_keyword(__array_extent)
+#endif // __has_builtin(__array_extent)
 
 // remove_extent
 
@@ -1723,12 +1723,12 @@ struct __is_core_convertible<_Tp, _Up, d
 
 // is_convertible
 
-#if __has_feature(is_convertible_to) && !defined(_LIBCPP_USE_IS_CONVERTIBLE_FALLBACK)
+#if __has_builtin(__is_convertible_to) && !defined(_LIBCPP_USE_IS_CONVERTIBLE_FALLBACK)
 
 template <class _T1, class _T2> struct _LIBCPP_TEMPLATE_VIS is_convertible
     : public integral_constant<bool, __is_convertible_to(_T1, _T2)> {};
 
-#else  // __has_feature(is_convertible_to)
+#else  // __has_builtin(__is_convertible_to)
 
 namespace __is_convertible_imp
 {
@@ -1795,7 +1795,7 @@ template <class _T1, class _T2> struct _
     static const size_t __complete_check2 = __is_convertible_check<_T2>::__v;
 };
 
-#endif // __has_feature(is_convertible_to)
+#endif // __has_builtin(__is_convertible_to)
 
 #if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)
 template <class _From, class _To>
@@ -1831,13 +1831,13 @@ inline constexpr bool is_nothrow_convert
 
 // is_empty
 
-#if __has_feature(is_empty) || defined(_LIBCPP_COMPILER_GCC)
+#if __has_builtin(__is_empty)
 
 template <class _Tp>
 struct _LIBCPP_TEMPLATE_VIS is_empty
     : public integral_constant<bool, __is_empty(_Tp)> {};
 
-#else  // __has_feature(is_empty)
+#else  // __has_builtin(__is_empty)
 
 template <class _Tp>
 struct __is_empty1
@@ -1858,7 +1858,7 @@ template <class _Tp> struct __libcpp_emp
 
 template <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_empty : public __libcpp_empty<_Tp> {};
 
-#endif // __has_feature(is_empty)
+#endif // __has_builtin(__is_empty)
 
 #if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)
 template <class _Tp>
@@ -1868,7 +1868,7 @@ _LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR boo
 
 // is_polymorphic
 
-#if __has_feature(is_polymorphic) || defined(_LIBCPP_COMPILER_MSVC)
+#if __has_builtin(__is_polymorphic) || defined(_LIBCPP_COMPILER_MSVC)
 
 template <class _Tp>
 struct _LIBCPP_TEMPLATE_VIS is_polymorphic
@@ -1884,7 +1884,7 @@ template<typename _Tp> __two &__is_polym
 template <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_polymorphic
     : public integral_constant<bool, sizeof(__is_polymorphic_impl<_Tp>(0)) == 1> {};
 
-#endif // __has_feature(is_polymorphic)
+#endif // __has_builtin(__is_polymorphic)
 
 #if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)
 template <class _Tp>
@@ -1894,7 +1894,7 @@ _LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR boo
 
 // has_virtual_destructor
 
-#if __has_feature(has_virtual_destructor) || defined(_LIBCPP_COMPILER_GCC)
+#if __has_builtin(__has_virtual_destructor)
 
 template <class _Tp> struct _LIBCPP_TEMPLATE_VIS has_virtual_destructor
     : public integral_constant<bool, __has_virtual_destructor(_Tp)> {};
@@ -2674,7 +2674,7 @@ template <class...> struct common_refere
 
 template<typename, typename _Tp> struct __select_2nd { typedef _LIBCPP_NODEBUG_TYPE _Tp type; };
 
-#if __has_keyword(__is_assignable)
+#if __has_builtin(__is_assignable)
 
 template<class _Tp, class _Up>
 struct _LIBCPP_TEMPLATE_VIS is_assignable : _BoolConstant<__is_assignable(_Tp, _Up)> { };
@@ -2684,7 +2684,7 @@ template <class _Tp, class _Arg>
 _LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_assignable_v = __is_assignable(_Tp, _Arg);
 #endif
 
-#else // __has_keyword(__is_assignable)
+#else // __has_builtin(__is_assignable)
 
 template <class _Tp, class _Arg>
 typename __select_2nd<decltype((declval<_Tp>() = declval<_Arg>())), true_type>::type
@@ -2714,7 +2714,7 @@ _LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR boo
     = is_assignable<_Tp, _Arg>::value;
 #endif
 
-#endif // __has_keyword(__is_assignable)
+#endif // __has_builtin(__is_assignable)
 
 // is_copy_assignable
 
@@ -2742,7 +2742,7 @@ _LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR boo
 
 // is_destructible
 
-#if __has_keyword(__is_destructible)
+#if __has_builtin(__is_destructible)
 
 template<class _Tp>
 struct _LIBCPP_TEMPLATE_VIS is_destructible : _BoolConstant<__is_destructible(_Tp)> { };
@@ -2752,7 +2752,7 @@ template <class _Tp>
 _LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_destructible_v = __is_destructible(_Tp);
 #endif
 
-#else // __has_keyword(__is_destructible)
+#else // __has_builtin(__is_destructible)
 
 //  if it's a reference, return true
 //  if it's a function, return false
@@ -2816,7 +2816,7 @@ _LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR boo
     = is_destructible<_Tp>::value;
 #endif
 
-#endif // __has_keyword(__is_destructible)
+#endif // __has_builtin(__is_destructible)
 
 template <class _MP, bool _IsMemberFunctionPtr, bool _IsMemberObjectPtr>
 struct __member_pointer_traits_imp
@@ -3053,7 +3053,7 @@ struct __member_pointer_class_type<_Ret
 # define _LIBCPP_GCC_SUPPORTS_IS_CONSTRUCTIBLE
 #endif
 
-#if !defined(_LIBCPP_CXX03_LANG) && !__has_feature(is_constructible) && !defined(_LIBCPP_GCC_SUPPORTS_IS_CONSTRUCTIBLE)
+#if !defined(_LIBCPP_CXX03_LANG) && !__has_builtin(__is_constructible) && !defined(_LIBCPP_GCC_SUPPORTS_IS_CONSTRUCTIBLE)
 
 template <class _Tp, class... _Args>
 struct __libcpp_is_constructible;
@@ -3168,7 +3168,7 @@ struct __libcpp_is_constructible<_Tp&&,
 
 #endif
 
-#if __has_feature(is_constructible) || defined(_LIBCPP_GCC_SUPPORTS_IS_CONSTRUCTIBLE)
+#if __has_builtin(__is_constructible) || defined(_LIBCPP_GCC_SUPPORTS_IS_CONSTRUCTIBLE)
 template <class _Tp, class ..._Args>
 struct _LIBCPP_TEMPLATE_VIS is_constructible
     : public integral_constant<bool, __is_constructible(_Tp, _Args...)>
@@ -3250,7 +3250,7 @@ _LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR boo
 
 // is_trivially_constructible
 
-#if __has_feature(is_trivially_constructible) || _GNUC_VER >= 501
+#if __has_builtin(__is_trivially_constructible) || _GNUC_VER >= 501
 
 template <class _Tp, class... _Args>
 struct _LIBCPP_TEMPLATE_VIS is_trivially_constructible
@@ -3258,7 +3258,7 @@ struct _LIBCPP_TEMPLATE_VIS is_trivially
 {
 };
 
-#else  // !__has_feature(is_trivially_constructible)
+#else  // !__has_builtin(__is_trivially_constructible)
 
 template <class _Tp, class... _Args>
 struct _LIBCPP_TEMPLATE_VIS is_trivially_constructible
@@ -3268,7 +3268,7 @@ struct _LIBCPP_TEMPLATE_VIS is_trivially
 
 template <class _Tp>
 struct _LIBCPP_TEMPLATE_VIS is_trivially_constructible<_Tp>
-#if __has_feature(has_trivial_constructor) || defined(_LIBCPP_COMPILER_GCC)
+#if __has_builtin(__has_trivial_constructor)
     : integral_constant<bool, __has_trivial_constructor(_Tp)>
 #else
     : integral_constant<bool, is_scalar<_Tp>::value>
@@ -3294,7 +3294,7 @@ struct _LIBCPP_TEMPLATE_VIS is_trivially
 {
 };
 
-#endif // !__has_feature(is_trivially_constructible)
+#endif // !__has_builtin(__is_trivially_constructible)
 
 
 #if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)
@@ -3341,7 +3341,7 @@ _LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR boo
 
 // is_trivially_assignable
 
-#if __has_feature(is_trivially_assignable) || _GNUC_VER >= 501
+#if __has_builtin(__is_trivially_assignable) || _GNUC_VER >= 501
 
 template <class _Tp, class _Arg>
 struct is_trivially_assignable
@@ -3349,7 +3349,7 @@ struct is_trivially_assignable
 {
 };
 
-#else  // !__has_feature(is_trivially_assignable)
+#else  // !__has_builtin(__is_trivially_assignable)
 
 template <class _Tp, class _Arg>
 struct is_trivially_assignable
@@ -3371,7 +3371,7 @@ template <class _Tp>
 struct is_trivially_assignable<_Tp&, _Tp&&>
     : integral_constant<bool, is_scalar<_Tp>::value> {};
 
-#endif // !__has_feature(is_trivially_assignable)
+#endif // !__has_builtin(__is_trivially_assignable)
 
 #if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)
 template <class _Tp, class _Arg>
@@ -3406,12 +3406,12 @@ _LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR boo
 
 // is_trivially_destructible
 
-#if __has_keyword(__is_trivially_destructible)
+#if __has_builtin(__is_trivially_destructible)
 
 template <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_trivially_destructible
     : public integral_constant<bool, __is_trivially_destructible(_Tp)> {};
 
-#elif __has_feature(has_trivial_destructor) || defined(_LIBCPP_COMPILER_GCC)
+#elif __has_builtin(__has_trivial_destructor)
 
 template <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_trivially_destructible
     : public integral_constant<bool, is_destructible<_Tp>::value && __has_trivial_destructor(_Tp)> {};
@@ -3438,7 +3438,7 @@ _LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR boo
 
 // is_nothrow_constructible
 
-#if __has_keyword(__is_nothrow_constructible)
+#if __has_builtin(__is_nothrow_constructible)
 
 template <class _Tp, class... _Args>
 struct _LIBCPP_TEMPLATE_VIS is_nothrow_constructible
@@ -3481,7 +3481,7 @@ struct _LIBCPP_TEMPLATE_VIS is_nothrow_c
 {
 };
 
-#endif // _LIBCPP_HAS_NO_NOEXCEPT
+#endif // __has_builtin(__is_nothrow_constructible)
 
 
 #if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)
@@ -3528,7 +3528,7 @@ _LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR boo
 
 // is_nothrow_assignable
 
-#if __has_keyword(__is_nothrow_assignable)
+#if __has_builtin(__is_nothrow_assignable)
 
 template <class _Tp, class _Arg>
 struct _LIBCPP_TEMPLATE_VIS is_nothrow_assignable
@@ -3556,7 +3556,7 @@ struct _LIBCPP_TEMPLATE_VIS is_nothrow_a
 {
 };
 
-#endif // _LIBCPP_HAS_NO_NOEXCEPT
+#endif // __has_builtin(__is_nothrow_assignable)
 
 #if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)
 template <class _Tp, class _Arg>
@@ -3654,7 +3654,7 @@ _LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR boo
 
 // is_pod
 
-#if __has_feature(is_pod) || defined(_LIBCPP_COMPILER_GCC)
+#if __has_builtin(__is_pod)
 
 template <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_pod
     : public integral_constant<bool, __is_pod(_Tp)> {};
@@ -3692,7 +3692,7 @@ _LIBCPP_DEPRECATED_IN_CXX17 _LIBCPP_INLI
 // is_standard_layout;
 
 template <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_standard_layout
-#if __has_feature(is_standard_layout) || defined(_LIBCPP_COMPILER_GCC)
+#if __has_builtin(__is_standard_layout)
     : public integral_constant<bool, __is_standard_layout(_Tp)>
 #else
     : integral_constant<bool, is_scalar<typename remove_all_extents<_Tp>::type>::value>
@@ -3708,7 +3708,7 @@ _LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR boo
 // is_trivially_copyable;
 
 template <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_trivially_copyable
-#if __has_feature(is_trivially_copyable)
+#if __has_builtin(__is_trivially_copyable)
     : public integral_constant<bool, __is_trivially_copyable(_Tp)>
 #elif _GNUC_VER >= 501
     : public integral_constant<bool, !is_volatile<_Tp>::value && __is_trivially_copyable(_Tp)>
@@ -3726,7 +3726,7 @@ _LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR boo
 // is_trivial;
 
 template <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_trivial
-#if __has_feature(is_trivial) || defined(_LIBCPP_COMPILER_GCC)
+#if __has_builtin(__is_trivial)
     : public integral_constant<bool, __is_trivial(_Tp)>
 #else
     : integral_constant<bool, is_trivially_copyable<_Tp>::value &&
-- 

