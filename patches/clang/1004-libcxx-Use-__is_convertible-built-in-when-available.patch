[libc++] Use __is_convertible built-in when available

https://github.com/llvm/llvm-project/issues/62396 reports that
GCC 13 barfs on parsing <type_traits> because of the declarations
of `struct __is_convertible`.  In GCC 13, `__is_convertible` is a
built-in, but `__is_convertible_to` is not.  Clang has both, so
using either should be fine.

Based on commit 484e64f7e7b2c0494d7b2dbfdd528bcd707ee652 from upstream.
Upstream commit Author: Roland McGrath <mcgrathr@google.com>
Upstream commit Author Date: Thu, 27 Apr 2023 14:18:18 -0700
Upstream commit Comitter: Roland McGrath <mcgrathr@google.com>
Upstream commit Commit Date: Thu, 27 Apr 2023 14:23:43 -0700
---
 libcxx/include/type_traits |    7 ++++++-
 1 file changed, 6 insertions(+), 1 deletion(-)

diff -pru llvm-project.orig/libcxx/include/type_traits llvm-project/libcxx/include/type_traits
--- llvm-project.orig/libcxx/include/type_traits	2024-05-02 20:00:47.015499054 -0500
+++ llvm-project/libcxx/include/type_traits	2024-05-02 20:08:17.927146208 -0500
@@ -1723,7 +1723,12 @@ struct __is_core_convertible<_Tp, _Up, d
 
 // is_convertible
 
-#if __has_builtin(__is_convertible_to) && !defined(_LIBCPP_USE_IS_CONVERTIBLE_FALLBACK)
+#if __has_builtin(__is_convertible) && !defined(_LIBCPP_USE_IS_CONVERTIBLE_FALLBACK)
+
+template <class _T1, class _T2>
+struct _LIBCPP_TEMPLATE_VIS is_convertible : public integral_constant<bool, __is_convertible(_T1, _T2)> {};
+
+#elif __has_builtin(__is_convertible_to) && !defined(_LIBCPP_USE_IS_CONVERTIBLE_FALLBACK)
 
 template <class _T1, class _T2> struct _LIBCPP_TEMPLATE_VIS is_convertible
     : public integral_constant<bool, __is_convertible_to(_T1, _T2)> {};
-- 

